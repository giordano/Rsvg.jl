using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcroco", "libcroco-0", "libcroco-0.6"], :libcroco),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Libcroco_jll.jl/releases/download/Libcroco-v0.6.13+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Libcroco.v0.6.13.aarch64-linux-gnu.tar.gz", "ac245705388212299ffa8059cd139947d4d4fb8e0d57e41c2e28f08c35919528"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Libcroco.v0.6.13.aarch64-linux-musl.tar.gz", "e0ff2c61b49fc2f363e03c64cbe71e6cf86e229921f9a72c5b51a7f23fc0f26f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Libcroco.v0.6.13.arm-linux-gnueabihf.tar.gz", "a42c266686a14679089fc084d471aa18b4f07e7c6562c483622173324729097c"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Libcroco.v0.6.13.arm-linux-musleabihf.tar.gz", "2be59d4eeb05f5186db83ee2ae8c4a90bec876990203b15cb3f672a1c0148c37"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Libcroco.v0.6.13.i686-linux-gnu.tar.gz", "393e74571a6c7665f7ad95c0cd207658e8e7dddd097e095ac77f7db996826b2f"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Libcroco.v0.6.13.i686-linux-musl.tar.gz", "d9ab065720dbfddcbc7fc04f6685ae32b1342a0cb0e4d07f62d3331dc985aa46"),
    Windows(:i686) => ("$bin_prefix/Libcroco.v0.6.13.i686-w64-mingw32.tar.gz", "fb656b9f50561107068118b17854a3a6af3f2bce30c066c361b92098c39e62f5"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Libcroco.v0.6.13.powerpc64le-linux-gnu.tar.gz", "eb9ea896a5b28a2f5b03babe3e3f38e61df3c96307f4a3c2647fbcc1d4accb0e"),
    MacOS(:x86_64) => ("$bin_prefix/Libcroco.v0.6.13.x86_64-apple-darwin14.tar.gz", "51093b45666ba03a144699d61ceb80ac875e90780e716aba1a16f4be44df2b1b"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Libcroco.v0.6.13.x86_64-linux-gnu.tar.gz", "6004454fa645ae0ed826a633d7fc17597a85182c542e68eab1766b118adff6d3"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Libcroco.v0.6.13.x86_64-linux-musl.tar.gz", "223d5519283f2166e5b1d45eb7fb4512c4dd7048d524a96c4f5689c41eb65286"),
    FreeBSD(:x86_64) => ("$bin_prefix/Libcroco.v0.6.13.x86_64-unknown-freebsd11.1.tar.gz", "62221250711a3d11fca7110159b100edc4ac760c29f3fa5d0852b24d62ec8e05"),
    Windows(:x86_64) => ("$bin_prefix/Libcroco.v0.6.13.x86_64-w64-mingw32.tar.gz", "60184b7b2c891b4bcd4f813864f8ea1fc4f6d0dc3f8df7a8057fd358e9c0dc2f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
