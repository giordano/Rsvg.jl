using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libxml2"], :libxml2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/XML2_jll.jl/releases/download/XML2-v2.9.9+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.aarch64-linux-gnu.tar.gz", "20bc6c1064d2f5add9efefc6738c46e9d7c630a2744c74cc214925db6e96589f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/XML2.v2.9.9.aarch64-linux-musl.tar.gz", "1124661c96ded3f0e39c2a277482a95db1e36d42365f2abbdb02ed6e3496878b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/XML2.v2.9.9.arm-linux-gnueabihf.tar.gz", "ba85346bb6ae06e54e7af57b8657488b174a7547368f546542ffd6f8787b7edf"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/XML2.v2.9.9.arm-linux-musleabihf.tar.gz", "3c5ffe2dce8960100e4e759b16468164949ddd4caab60e7b78940ce3e4440bd7"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.i686-linux-gnu.tar.gz", "337aefb486c98fec99ba0aef955d8ddccdd28dff1c57ccc9d8c1cb15372ceafc"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/XML2.v2.9.9.i686-linux-musl.tar.gz", "13010fd528987c502d2e9e66f69e701ac4cba6fc1a08da628d4e8bb44a13f1bb"),
    Windows(:i686) => ("$bin_prefix/XML2.v2.9.9.i686-w64-mingw32.tar.gz", "97502c5074cbb8f6edddb73d2dd3dfc0b66ccfd8aaedd2673dad6f0bfc9ceed5"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.powerpc64le-linux-gnu.tar.gz", "ba2d1e2e1abddc8f03446287560b87b2bf02f6ececad2340fdfb2771cf129206"),
    MacOS(:x86_64) => ("$bin_prefix/XML2.v2.9.9.x86_64-apple-darwin14.tar.gz", "25b5300a804fed74f59fcad98ca18821dd8b46a9609320c038827e2b1b39ce5a"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/XML2.v2.9.9.x86_64-linux-gnu.tar.gz", "fa15b5c2b66f0c0027f470ebdbd5822b2575840bc706815b9617b22c88a05a91"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/XML2.v2.9.9.x86_64-linux-musl.tar.gz", "e99435356163f13b43c104491a0f9e7fdf35a02ac783bd152199e0bc5770888a"),
    FreeBSD(:x86_64) => ("$bin_prefix/XML2.v2.9.9.x86_64-unknown-freebsd11.1.tar.gz", "0f1fa19af93a77da7caad7e7aa102c4f1441f0ebac08e32f8f013112b17ff077"),
    Windows(:x86_64) => ("$bin_prefix/XML2.v2.9.9.x86_64-w64-mingw32.tar.gz", "1064d56cce474f0da3f31541f0627d3e8fb185130c33eb19e157138a7c5293d2"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
